//  
  That's the wrapper for your presentation steps. In this element all the impress.js magic happens.
  It doesn't have to be a `<div>`. Only `id` is important here as that's how the script find it.

  It's worth to notice the `impress-not-supported` class. This class means, that browser doesn't
  support features required by impress.js, so you can apply some fallback styles in your CSS.
  It's not necessary to add it manually on this element. If the script detects that browser is not
  good enough it will add this class, but keeping it in HTML means that users without JavaScript
  will also get fallback styles.

  The class name on this element also depends on currently active presentation step. More details about
  it can be found below, when `hint` element is being described. 
      
#impress.impress-not-supported
  .fallback-message
    p
      | Your browser
      b doesn't support the features required
      | by impress.js, so you are presented with a simplified version of this presentation.
    p
      | For the best experience please use the latest
      b Chrome
      | or
      b Safari
      | browser. Firefox 10 (to be released soon) will also handle it.
  //
    Here is where interesting thing start to happen.
  
    Each step of the presentation should be an element inside the `#impress` with a class name
    of `step`. These step elements are positioned, rotated and scaled by impress.js, and
    the 'camera' shows them on each step of the presentation.
  
    Positioning information is passed through data attributes.
  
    In the example below we only specify x and y position of the step element with `data-x="-1000"`
    and `data-y="-1500` attributes. This means that **the center** of the element (yes, the center)
    will be positioned in point x = -1000px and y = -1500px of the presentation 'canvas'.
  
    It will not be rotated or scaled.
            
        
    #bored.step.slide(data-x='-1000', data-y='-1500')
      q
        | Aren't you just
        b bored
        | with all those slides-based presentations?
  //
    The `id` attribute of the step element is used to identify it in the URL, but it's optional.
    If it is not defined, it will get a default value of `step-N` where N is a number of slide.
  
    So in the example below it'll be `step-2`.
  
    The hash part of the url when this step is active will be `#/step-2`.
  
    You can also use `#step-2` in a link, to point directly to this particular step.
  
    Please note, that while `#/step-2` (with slash) would also work in a link it's not recommended.
    Using classic `id`-based links like `#step-2` makes these links usable also in fallback mode.
            
        
  //
    This is an example of step element being scaled.
  
    Again, we use a `data-` attribute, this time it's `data-scale="4"`, so it means that this
    element will be 4 times larger than the others.
    From presentation and transitions point of view it means, that it will have to be scaled
    down (4 times) to make it back to it's correct size.
          
        
  #title.step(data-x='0', data-y='0', data-scale='4')
    span.try Yo Pay Attention!
    h1 Welcome to Nastasia's website
 
  //
    This element introduces rotation.
  
    Notation shouldn't be a surprise. We use `data-rotate="90"` attribute, meaning that this
    element should be rotated by 90 degrees clockwise.
                                                             
        
  #its.step(data-x='850', data-y='3000', data-rotate='90', data-scale='5')
    p
      | My dad and I created this simple website. I want to come up a with a business as big and moshi monsters and club penguin.
      br
      strong Stay tuned...
  #big.step(data-x='3500', data-y='2100', data-rotate='180', data-scale='6')
    p
      | awesomely
      b big
      span.thoughts ideas
  //
    And now it gets really exiting! We move into third dimension!
  
    Along with `data-x` and `data-y`, you can define the position on third (Z) axis, with
    `data-z`. In the example below we use `data-z="-3000"` meaning that element should be
    positioned far away from us (by 3000px).
            
        
  #tiny.step(data-x='2825', data-y='2325', data-z='-3000', data-rotate='300', data-scale='1')
    p
      | and maybe some 
      b small ideas
  #ing.step(data-x='3500', data-y='-850', data-rotate='270', data-scale='6')
    p
      | by
      b.positioning positioning
      | ,
      b.rotating rotating
      | and
      b.scaling scaling
      | them on an infinite canvas
  #imagination.step(data-x='6700', data-y='-300', data-scale='6')
    p
      | the only
      b limit
      | is your
      b.imagination imagination
  #source.step(data-x='6300', data-y='2000', data-rotate='20', data-scale='4')
    p want to know more?
    q
      a(href='http://github.com/bartaz/impress.js') use the source
      | , Luke!
  #one-more-thing.step(data-x='6000', data-y='4000', data-scale='2')
    p one more thing...
  //
    And the last one shows full power and flexibility of impress.js.
  
    You can not only position element in 3D, but also rotate it around any axis.
    So this one here will get rotated by -40 degrees (40 degrees anticlockwise) around X axis and
    10 degrees (clockwise) around Y axis.
  
    You can of course rotate it around Z axis with `data-rotate-z` - it has exactly the same effect
    as `data-rotate` (these two are basically aliases).
    
      
  #its-in-3d.step(data-x='6200', data-y='4300', data-z='-100', data-rotate-x='-40', data-rotate-y='10', data-scale='2')
    p
      span.have have
      span.you you
      span.noticed noticed
      span.its it's
      span.in in
      b
        | 3D
        sup *
      | ?
    span.footnote * beat that, prezi ;)
  //
    So to make a summary of all the possible attributes used to position presentation steps, we have:
  
    * `data-x`, `data-y`, `data-z` -- they define the position of **the center** of step element on the canvas in pixels; their default value is 0;
    * `data-rotate-x`, `data-rotate-y`, 'data-rotate-z`, `data-rotate` -- they define the rotation of the element around given axis in degrees; their default value is 0; `data-rotate` and `data-rotate-z` are exactly the same;
    * `data-scale` -- defines the scale of step element; default value is 1
          
        
  #overview.step(data-x='3000', data-y='1500', data-scale='10')
  //
    Hint is not related to impress.js in any way.
  
    But it can show you how to use impress.js features in creative way.
  
    When the presentation step is shown (selected) it's element get's the class of "active" and `#impress` root
    element get's the class based on active step id `step-ID` (where ID is the step id)... It probably is not
    so clear because of all these IDs in here, so for example when the first step (the one with id of `bored`)
    is active, `#impress` element get a class of `step-bored`.
  
    This class is used by this hint below. Check CSS file to see how it's shown with delayed CSS animation.
      
  .hint
    p Use a spacebar or arrow keys to navigate

